# INIT {{{1 
export PATH=$PATH:$SSHHOME
if [ -r /etc/profile ];then
    source /etc/profile;
fi
if [ -r ~/.bash_profile ];then
    source ~/.bash_profile
elif [ -r ~/.bash_login ];then
    source ~/.bash_login
elif [ -r ~/.profile ];then
    source ~/.profile
fi
#}}}
# ENV {{{1
SERVER_IP=$(echo $SSH_CONNECTION | awk '{print $3}')
# PS1=root@ip_address(hostname)
export PS1="\n\e[38;5;46m\u\e[m@\e[38;5;201m$SERVER_IP(\h)\e[m\n[\w]\\$ "
export EDITOR='vim'
# inputrc
bind 'set completion-ignore-case on'
# disable XON/XOFF, enable <c-s> to search bash history
stty -ixon
export LC_ALL="en_US.utf8"
#}}}
# Alias {{{1
#alias vim='vim -u $SSHHOME/.sshrc.d/vim/vimrc'
alias ....='cd ../../..'
alias ...='cd ../..'
alias ..='cd ..'
alias curl='curl -v'
alias d='dirs -v'
alias dirs='dirs -v'
alias file.get.abs_path='readlink -f'
alias grep='grep --color'
alias jobs="jobs -l"
alias ll="ls -lh"
alias mkdir='mkdir -pv'
alias pd='pushd'
alias port.findby.listen='netstat -antuplo | grep'
alias port.findby.port='netstat -antuplo | grep'
alias port.list='netstat -antuplo'
alias tomcat.catalina.less="less logs/catalina.out"
alias tomcat.catalina.tail='tail -f logs/catalina.out'
# }}}
# Functions {{{1
c(){ #{{{2
    cd $1
    ls
}
#}}}
file.findby.name(){  # {{{2 用文件名查找文件
    if [[ "" == $2 ]]; then
        wd="."
    else
        wd=$2
    fi
    find $wd -iname "*$1*" -type f
}
#}}}
file.findby.name.abs(){  # {{{2 用文件名查找文件,绝对路径
    if [[ "" == $2 ]]; then
        wd="."
    else
        wd=$2
    fi
    find $wd -iname "*$1*" -type f -exec readlink -f {} \;
}
#}}}
file.findby.namelistfile.abs(){  # {{{2 查找文件中包含的文件名，绝对路径
    cat $1 | while read filename;do
        echo "$filename"
        find . -iname "*$filename*" -type f -exec readlink -f {} \;
        echo "---------"
    done
}
#}}}
java.nohup(){ #{{{
    nohup java -server -Xms128m -Xmx1024m -jar $1 &
}
#}}}
process.findby.name(){  # {{{2 以进程名查找进程
    ps -ef | grep -i "$1" | grep -v grep
}

process.findby.port(){  # {{{2 查找某端口对应的进程
    local port=$1
    local pid=`netstat -ntpl | awk -F'[ \t:/]+' '/'"$port"'/{print $9}'`
    if [ -z "$pid" ];then
        echo -e "$(tput setaf 9)404 NOT FOUND$(tput sgr0)" >&2
    else
        echo -e "$(tput setaf 10)Port: $port, PID: $pid$(tput sgr0)"
        ps aux | grep $pid | grep -v grep
    fi
}
#}}}
pj.alias.init(){  # {{{2 在/usr/local/tomcat*，目录下查找war包，并初始化相关 alias
    for war in $(find /usr/local/tomcat*/webapps/  -maxdepth 1 -iname '*.war');do
        war_file=$(basename $war)
        war_name=$(awk -v war_file=$war_file 'BEGIN{print gensub(/(.*)\.war/, "\\1", "g", tolower(war_file))}')
        tomcat_path=$(readlink -f $(dirname $war)/../)
        alias "tomcat.$(basename $tomcat_path)"="cd $tomcat_path"
        alias "pj.$war_name"="cd $tomcat_path"
    done
}
#}}}
yum.localrepo.setup(){  #{{{2 初始化本地yum
    local path=$1
    if [[ ! -z "$path" ]]; then
        cat > /etc/yum.repos.d/local.repo <<eof
[Local]
name=CentOS - Media
baseurl=file://$path
gpgcheck=0
enabled=1
eof
    fi
}
#}}}
tomcat.change_port(){  # {{{2 根据路径中端口号，修改tomcat server.xml
    if [[ $# -lt 1 ]]; then
        echo "give me the config file" >& 2
        return 1
    fi

    local config=`readlink -f $1`
    if [[ ! -f $config ]]; then
        echo "$config is not a regular file" >& 2
        return 2
    fi

    # /usr/local/tomcat7_8080/conf/server.xml ==> 8080
    local conn_port=`echo $config | sed -E 's/.*_([0-9]+)\/.*/\1/'`
    local server_port=0
    let "server_port=$conn_port+100"
    sed -i -e 's/Server port="[^"]*"/Server port="'$server_port'"/' \
        -e 's/Connector port="[^"]*" protocol="HTTP/Connector port="'$conn_port'" protocol="HTTP/' \
        $config
}
#}}}
tunnel.zzzw.inet.db.create(){ #{{{2
    ssh -o "ServerAliveInterval 180" -NfL 192.168.80.100:1521:172.30.41.42:1521 -p 9722 localhost
}
#}}}
tunnel.zzzw.inet.web.create(){ #{{{2
	ssh -NfD 192.168.80.100:10000 -p 9722 localhost
}
#}}}
tunnel.zzzw.px.web.create(){ #{{{2
	ssh -NfD 192.168.80.100:10001 -p 2822 localhost
}
#}}}
tunnel.sock5.create(){ #{{{2
    tunnel_port=$1
    ((sock5_port=$tunnel_port + 1))
    echo "Please input password of tunnel"
    ssh -NfD *:$sock5_port localhost -p $tunnel_port
    echo "sock5 port is: $sock5_port"
}
user.change(){ #{{{2
    cd `getent passwd real | cut -d: -f6`
    sudo -E -u $1 bash --rcfile $SSHHOME/.sshrc
}
#2}}}
#1}}}

# vim: ft=bash fdm=marker sw=4 ts=4 et
