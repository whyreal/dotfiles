/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* start := vars={ varLine | commentLine | blankLine }*
*          req=reqLine
*          headers=headerLine*
*          newLine*
*          body=bodyLine*
* //var line
* varLine     := '@' name=wordC+ _ '=' _ value=wordWithVar newLine
* commentLine := '#.+' newLine
* blankLine   := '[ \t]*' newLine
* // reqLine
* reqLine := method=method _ url=url _ proto=proto? _
* method  := 'POST' | 'GET' | 'DELETE' | 'PUT'
* url     := {urlC | varRef}+
* proto   := urlC+
* // headerLine
* headerLine := newLine name=wordC+ _ ':' _ value=wordWithVar
* // bodyLine
* bodyLine := value='.+' newLine?
* // sets
* wordWithVar    := {wordC | varRef}+
* varRef  := '{{' name = wordC+ '}}'
* urlC    := '[0-9a-zA-z_\-:/.?#]'
* wordC   := '[0-9a-zA-z_\-.]'
* newLine := _ '\n'
* _       := '[ \t]*'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    start = "start",
    start_$0_1 = "start_$0_1",
    start_$0_2 = "start_$0_2",
    start_$0_3 = "start_$0_3",
    varLine = "varLine",
    commentLine = "commentLine",
    blankLine = "blankLine",
    reqLine = "reqLine",
    method_1 = "method_1",
    method_2 = "method_2",
    method_3 = "method_3",
    method_4 = "method_4",
    url = "url",
    url_$0_1 = "url_$0_1",
    url_$0_2 = "url_$0_2",
    proto = "proto",
    headerLine = "headerLine",
    bodyLine = "bodyLine",
    wordWithVar = "wordWithVar",
    wordWithVar_$0_1 = "wordWithVar_$0_1",
    wordWithVar_$0_2 = "wordWithVar_$0_2",
    varRef = "varRef",
    urlC = "urlC",
    wordC = "wordC",
    newLine = "newLine",
    _ = "_",
}
export interface start {
    kind: ASTKinds.start;
    vars: start_$0[];
    req: reqLine;
    headers: headerLine[];
    body: bodyLine[];
}
export type start_$0 = start_$0_1 | start_$0_2 | start_$0_3;
export type start_$0_1 = varLine;
export type start_$0_2 = commentLine;
export type start_$0_3 = blankLine;
export interface varLine {
    kind: ASTKinds.varLine;
    name: wordC[];
    value: wordWithVar;
}
export interface commentLine {
    kind: ASTKinds.commentLine;
}
export interface blankLine {
    kind: ASTKinds.blankLine;
}
export interface reqLine {
    kind: ASTKinds.reqLine;
    method: method;
    url: url;
    proto: Nullable<proto>;
}
export type method = method_1 | method_2 | method_3 | method_4;
export type method_1 = string;
export type method_2 = string;
export type method_3 = string;
export type method_4 = string;
export type url = url_$0[];
export type url_$0 = url_$0_1 | url_$0_2;
export type url_$0_1 = urlC;
export type url_$0_2 = varRef;
export type proto = urlC[];
export interface headerLine {
    kind: ASTKinds.headerLine;
    name: wordC[];
    value: wordWithVar;
}
export interface bodyLine {
    kind: ASTKinds.bodyLine;
    value: string;
}
export type wordWithVar = wordWithVar_$0[];
export type wordWithVar_$0 = wordWithVar_$0_1 | wordWithVar_$0_2;
export type wordWithVar_$0_1 = wordC;
export type wordWithVar_$0_2 = varRef;
export interface varRef {
    kind: ASTKinds.varRef;
    name: wordC[];
}
export type urlC = string;
export type wordC = string;
export interface newLine {
    kind: ASTKinds.newLine;
}
export type _ = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchstart($$dpth: number, $$cr?: ErrorTracker): Nullable<start> {
        return this.run<start>($$dpth,
            () => {
                let $scope$vars: Nullable<start_$0[]>;
                let $scope$req: Nullable<reqLine>;
                let $scope$headers: Nullable<headerLine[]>;
                let $scope$body: Nullable<bodyLine[]>;
                let $$res: Nullable<start> = null;
                if (true
                    && ($scope$vars = this.loop<start_$0>(() => this.matchstart_$0($$dpth + 1, $$cr), true)) !== null
                    && ($scope$req = this.matchreqLine($$dpth + 1, $$cr)) !== null
                    && ($scope$headers = this.loop<headerLine>(() => this.matchheaderLine($$dpth + 1, $$cr), true)) !== null
                    && this.loop<newLine>(() => this.matchnewLine($$dpth + 1, $$cr), true) !== null
                    && ($scope$body = this.loop<bodyLine>(() => this.matchbodyLine($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.start, vars: $scope$vars, req: $scope$req, headers: $scope$headers, body: $scope$body};
                }
                return $$res;
            });
    }
    public matchstart_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<start_$0> {
        return this.choice<start_$0>([
            () => this.matchstart_$0_1($$dpth + 1, $$cr),
            () => this.matchstart_$0_2($$dpth + 1, $$cr),
            () => this.matchstart_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchstart_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<start_$0_1> {
        return this.matchvarLine($$dpth + 1, $$cr);
    }
    public matchstart_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<start_$0_2> {
        return this.matchcommentLine($$dpth + 1, $$cr);
    }
    public matchstart_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<start_$0_3> {
        return this.matchblankLine($$dpth + 1, $$cr);
    }
    public matchvarLine($$dpth: number, $$cr?: ErrorTracker): Nullable<varLine> {
        return this.run<varLine>($$dpth,
            () => {
                let $scope$name: Nullable<wordC[]>;
                let $scope$value: Nullable<wordWithVar>;
                let $$res: Nullable<varLine> = null;
                if (true
                    && this.regexAccept(String.raw`(?:@)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.loop<wordC>(() => this.matchwordC($$dpth + 1, $$cr), false)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:=)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchwordWithVar($$dpth + 1, $$cr)) !== null
                    && this.matchnewLine($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.varLine, name: $scope$name, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchcommentLine($$dpth: number, $$cr?: ErrorTracker): Nullable<commentLine> {
        return this.run<commentLine>($$dpth,
            () => {
                let $$res: Nullable<commentLine> = null;
                if (true
                    && this.regexAccept(String.raw`(?:#.+)`, $$dpth + 1, $$cr) !== null
                    && this.matchnewLine($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.commentLine, };
                }
                return $$res;
            });
    }
    public matchblankLine($$dpth: number, $$cr?: ErrorTracker): Nullable<blankLine> {
        return this.run<blankLine>($$dpth,
            () => {
                let $$res: Nullable<blankLine> = null;
                if (true
                    && this.regexAccept(String.raw`(?:[ \t]*)`, $$dpth + 1, $$cr) !== null
                    && this.matchnewLine($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.blankLine, };
                }
                return $$res;
            });
    }
    public matchreqLine($$dpth: number, $$cr?: ErrorTracker): Nullable<reqLine> {
        return this.run<reqLine>($$dpth,
            () => {
                let $scope$method: Nullable<method>;
                let $scope$url: Nullable<url>;
                let $scope$proto: Nullable<Nullable<proto>>;
                let $$res: Nullable<reqLine> = null;
                if (true
                    && ($scope$method = this.matchmethod($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$url = this.matchurl($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$proto = this.matchproto($$dpth + 1, $$cr)) || true)
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.reqLine, method: $scope$method, url: $scope$url, proto: $scope$proto};
                }
                return $$res;
            });
    }
    public matchmethod($$dpth: number, $$cr?: ErrorTracker): Nullable<method> {
        return this.choice<method>([
            () => this.matchmethod_1($$dpth + 1, $$cr),
            () => this.matchmethod_2($$dpth + 1, $$cr),
            () => this.matchmethod_3($$dpth + 1, $$cr),
            () => this.matchmethod_4($$dpth + 1, $$cr),
        ]);
    }
    public matchmethod_1($$dpth: number, $$cr?: ErrorTracker): Nullable<method_1> {
        return this.regexAccept(String.raw`(?:POST)`, $$dpth + 1, $$cr);
    }
    public matchmethod_2($$dpth: number, $$cr?: ErrorTracker): Nullable<method_2> {
        return this.regexAccept(String.raw`(?:GET)`, $$dpth + 1, $$cr);
    }
    public matchmethod_3($$dpth: number, $$cr?: ErrorTracker): Nullable<method_3> {
        return this.regexAccept(String.raw`(?:DELETE)`, $$dpth + 1, $$cr);
    }
    public matchmethod_4($$dpth: number, $$cr?: ErrorTracker): Nullable<method_4> {
        return this.regexAccept(String.raw`(?:PUT)`, $$dpth + 1, $$cr);
    }
    public matchurl($$dpth: number, $$cr?: ErrorTracker): Nullable<url> {
        return this.loop<url_$0>(() => this.matchurl_$0($$dpth + 1, $$cr), false);
    }
    public matchurl_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<url_$0> {
        return this.choice<url_$0>([
            () => this.matchurl_$0_1($$dpth + 1, $$cr),
            () => this.matchurl_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchurl_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<url_$0_1> {
        return this.matchurlC($$dpth + 1, $$cr);
    }
    public matchurl_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<url_$0_2> {
        return this.matchvarRef($$dpth + 1, $$cr);
    }
    public matchproto($$dpth: number, $$cr?: ErrorTracker): Nullable<proto> {
        return this.loop<urlC>(() => this.matchurlC($$dpth + 1, $$cr), false);
    }
    public matchheaderLine($$dpth: number, $$cr?: ErrorTracker): Nullable<headerLine> {
        return this.run<headerLine>($$dpth,
            () => {
                let $scope$name: Nullable<wordC[]>;
                let $scope$value: Nullable<wordWithVar>;
                let $$res: Nullable<headerLine> = null;
                if (true
                    && this.matchnewLine($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.loop<wordC>(() => this.matchwordC($$dpth + 1, $$cr), false)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchwordWithVar($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.headerLine, name: $scope$name, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchbodyLine($$dpth: number, $$cr?: ErrorTracker): Nullable<bodyLine> {
        return this.run<bodyLine>($$dpth,
            () => {
                let $scope$value: Nullable<string>;
                let $$res: Nullable<bodyLine> = null;
                if (true
                    && ($scope$value = this.regexAccept(String.raw`(?:.+)`, $$dpth + 1, $$cr)) !== null
                    && ((this.matchnewLine($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.bodyLine, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchwordWithVar($$dpth: number, $$cr?: ErrorTracker): Nullable<wordWithVar> {
        return this.loop<wordWithVar_$0>(() => this.matchwordWithVar_$0($$dpth + 1, $$cr), false);
    }
    public matchwordWithVar_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<wordWithVar_$0> {
        return this.choice<wordWithVar_$0>([
            () => this.matchwordWithVar_$0_1($$dpth + 1, $$cr),
            () => this.matchwordWithVar_$0_2($$dpth + 1, $$cr),
        ]);
    }
    public matchwordWithVar_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<wordWithVar_$0_1> {
        return this.matchwordC($$dpth + 1, $$cr);
    }
    public matchwordWithVar_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<wordWithVar_$0_2> {
        return this.matchvarRef($$dpth + 1, $$cr);
    }
    public matchvarRef($$dpth: number, $$cr?: ErrorTracker): Nullable<varRef> {
        return this.run<varRef>($$dpth,
            () => {
                let $scope$name: Nullable<wordC[]>;
                let $$res: Nullable<varRef> = null;
                if (true
                    && this.regexAccept(String.raw`(?:{{)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.loop<wordC>(() => this.matchwordC($$dpth + 1, $$cr), false)) !== null
                    && this.regexAccept(String.raw`(?:}})`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.varRef, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchurlC($$dpth: number, $$cr?: ErrorTracker): Nullable<urlC> {
        return this.regexAccept(String.raw`(?:[0-9a-zA-z_\-:/.?#])`, $$dpth + 1, $$cr);
    }
    public matchwordC($$dpth: number, $$cr?: ErrorTracker): Nullable<wordC> {
        return this.regexAccept(String.raw`(?:[0-9a-zA-z_\-.])`, $$dpth + 1, $$cr);
    }
    public matchnewLine($$dpth: number, $$cr?: ErrorTracker): Nullable<newLine> {
        return this.run<newLine>($$dpth,
            () => {
                let $$res: Nullable<newLine> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\n)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.newLine, };
                }
                return $$res;
            });
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.regexAccept(String.raw`(?:[ \t]*)`, $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchstart(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchstart(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchstart(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<start>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}