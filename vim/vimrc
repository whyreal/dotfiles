" Bundles
    if has('vim_starting')
        set nocompatible               " Be iMproved
        set runtimepath+=~/.vim/bundle/neobundle.vim/
    endif
    call neobundle#begin(expand('~/.vim/bundle/'))
    NeoBundleFetch 'Shougo/neobundle.vim'

	" Leader Key
	let mapleader=","
    nmap <C-l> [show]
    nmap <C-T> [tab]

    " Unite Sources
        NeoBundle 'Shougo/unite.vim'
            call unite#custom#profile('default', 'context', {
            \   'start_insert': 1,
            \   'winheight': 10,
            \ })
            nnoremap [show]c :Unite command<CR>
            nnoremap [show]b :Unite buffer<CR>

    " Edit
        NeoBundle 'vim-scripts/DrawIt'
        NeoBundle 'greyblake/vim-preview'
        NeoBundle 'mattn/emmet-vim'
		"NeoBundle 'Valloric/YouCompleteMe'
		NeoBundle 'MarcWeber/vim-addon-errorformats'

        NeoBundle "rizzatti/dash.vim"
            nmap [show]d :Dash<CR>

		NeoBundle 'msanders/snipmate.vim'
			"ino <c-x><c-x> <c-r>=TriggerSnippet()<cr>
			"snor <c-x><c-x> <esc>i<right><c-r>=TriggerSnippet()<cr>

        NeoBundle 'scrooloose/syntastic'
            let g:syntastic_check_on_open = 0
            let g:syntastic_mode_map = { 'mode': 'passive'}
            let g:syntastic_error_symbol='✗'
            let g:syntastic_warning_symbol='⚠'
			let g:syntastic_javascript_jshint_conf = "--config /Users/real/.jshint.json"
            let g:syntastic_javascript_checker = 'jshint'

    " syntax
        NeoBundle 'plasticboy/vim-markdown'
        NeoBundle 'puppetlabs/puppet-syntax-vim'
		NeoBundle 'gorodinskiy/vim-coloresque'

		NeoBundle 'xolox/vim-lua-ftplugin'
			NeoBundle 'xolox/vim-misc'

		NeoBundle 'fatih/vim-go'
			let g:go_disable_autoinstall = 1

    " UI
        NeoBundle 'vim-scripts/The-NERD-tree'
            let g:NERDTreeShowBookmarks = 1
            let g:NERDTreeShowFiles = 1
            let g:NERDTreeWinPos = "right"
            let g:NERDTreeChDirMode = 2
            let g:NERDTreeAutoCenter = 1
            nnoremap <F2> :NERDTreeToggle<CR>
            inoremap <F2> <ESC>:NERDTreeToggle<CR>

    call neobundle#end()

    filetype plugin indent on
    syntax on

" Edit
    set pastetoggle=<F11>
    set clipboard=unnamed         " yank and paste with the system clipboard
    set autoread
    set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1

    " block edit
    nnoremap <silent> <F10> :call r#toggle_option("virtualedit", "all", "") <CR>

    inoremap jj <Esc>
	noremap q; q:
	nnoremap <Leader>w :w<CR>
	nnoremap <Leader>q :q<CR>
	nnoremap <Leader>g :grep -i
    nnoremap <Leader>r :make % <CR>
    nnoremap <Leader>l :lopen <CR>
    nnoremap <Leader>c :copen <CR>

    " Auto change input method (gui only)
    if has('gui_running')
        set noimdisable
        set iminsert=0
        set imsearch=0
    endif

    " Better Shift
    vnoremap < <gv
    vnoremap > >gv
    nnoremap < <<
    nnoremap > >>

	" Scroll viewport faster.
	nnoremap <C-e> 3<C-e>
	nnoremap <C-y> 3<C-y>

" Fold
    "autocmd Syntax vim,python call r#use_my_indent_foldexpr()
    "autocmd Syntax * let &commentstring=" " . &commentstring
    "set foldtext=r#get_foldtext()
    "set foldlevel=99

" Tab
    " Navigation
        nnoremap [tab]f  :tabfirst<CR>
        nnoremap [tab]l  :tablast<CR>
        nnoremap [tab]p  :tabprev<CR>
        nnoremap [tab]n  :tabnext<CR>
        nnoremap [tab]c  :tabnew<CR>

" Ui
    set fillchars=vert:\|
    "set list listchars=tab:»\ ,trail:· "XXXXX
    set hidden
    set mouse=a
    set bg=dark
    colorscheme desert

    if has('gui_running')
        set macmeta
        set cul
        set guifont=Lucida\ Sans\ Typewriter:h14
        set transparency=0
        "set guioptions-=T
        "set guioptions-=R
        set guioptions-=r
        "set guioptions-=l
        set guioptions-=L
    elseif $TERM_PROGRAM == "iTerm.app"
        set t_Co=256
        "let g:solarized_termcolors=256
        "let g:solarized_underline=0
        "colorscheme solarized
    endif

    " Split
    set splitbelow
    "set splitright
    set previewheight=5

    " Number
    "set number
    "set relativenumber
    set foldcolumn=4

    " Status line
    set ruler
    set laststatus=2
    set statusline=%y\ %m%F%=%r\ line:\ %l\ column:\ %c\ %P

" undo/bak/swp file
    " persistent undo
        let s:undo_dir = $HOME . "/.vim/cache/undo"
        if exists('+undofile')
            "call r#check_dir_exist(s:undo_dir)
            set undofile
            let &undodir = s:undo_dir
        endif

    " backups
        let s:backup_dir = $HOME . "/.vim/cache/backup"
        "call r#check_dir_exist(s:backup_dir)
        set backup
        let &backupdir = s:backup_dir

    " swap files
        let s:swap_dir = $HOME . "/.vim/cache/swap"
        "call r#check_dir_exist(s:swap_dir)
        set noswapfile
        let &directory = s:swap_dir

" Search
    set smartcase
    set ignorecase
    set hlsearch
    set incsearch
    set tags=tags;/
    set wildmenu
    set wildmode=full
	set iskeyword=@,48-57,_,192-255,-,#,^.

" Functions & Command
    command! CdCurrentDir :cd %:p:h
    command! OpenCurrentDir :!open %:p:h
