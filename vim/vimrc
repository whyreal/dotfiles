" Package Manager {{{1

" use python3
if has('python3')
endif

call plug#begin('~/.vim/plugged')

" basic plugins{{{2
let mapleader=" "
Plug 'tpope/vim-sensible'
Plug 'whyreal/wr_vim'
" 模版
Plug 'whyreal/vim-template'
"}}}
" 输入法切换{{{2
Plug 'ybian/smartim'
"Plug 'rlue/vim-barbaric'
    "let g:barbaric_default = 2
    "let g:barbaric_scope = 'buffer'
"}}}
" fuzzy finder{{{2
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'Shougo/denite.nvim'
    nnoremap <leader>ff :Denite file/rec<cr>
    nnoremap <leader>fb :Denite buffer<cr>
    nnoremap <leader>ft :Denite filetype<cr>

"}}}
" 导航{{{2
Plug 'christoomey/vim-tmux-navigator'
Plug 'scrooloose/nerdtree'
    nnoremap <leader>ve :NERDTreeToggle<CR>
    let NERDTreeShowBookmarks = 0
    let NERDTreeBookmarksSort = 0

Plug 'vim-voom/VOoM'
    let g:voom_tree_placement = 'right'
    let g:voom_ft_modes = {'markdown': 'pandoc'}
    let g:voom_always_allow_move_left = 1
    au BufRead * call wr#DetectVoomType()
    nnoremap <silent> <leader>vv :VoomToggle<CR>

Plug 'majutsushi/tagbar'
    nnoremap <leader>vt :TagbarToggle<cr>

"}}}
" 自动补全{{{2

Plug 'neoclide/coc.nvim' , {'tag': '*', 'do': { -> coc#util#install()}}
Plug 'neoclide/coc-denite'
    " if hidden is not set, TextEdit might fail.
    set hidden

    " Better display for messages
    set cmdheight=2

    " Smaller updatetime for CursorHold & CursorHoldI
    set updatetime=300

    " don't give |ins-completion-menu| messages.
    set shortmess+=c

    " always show signcolumns
    set signcolumn=yes

    " Use tab for trigger completion with characters ahead and navigate.
    " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> for trigger completion.
    inoremap <silent><expr> <c-space> coc#refresh()

    " Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
    " Coc only does snippet and additional edit on confirm.
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

    " Use `[c` and `]c` for navigate diagnostics
    nmap <silent> [c <Plug>(coc-diagnostic-prev)
    nmap <silent> ]c <Plug>(coc-diagnostic-next)

    " Remap keys for gotos
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K for show documentation in preview window
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if &filetype == 'vim'
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction

    " Highlight symbol under cursor on CursorHold
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Remap for rename current word
    nmap <leader>rn <Plug>(coc-rename)

    " Remap for format selected region
    vmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
      autocmd!
      " Setup formatexpr specified filetype(s).
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
    vmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap for do codeAction of current line
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Fix autofix problem of current line
    nmap <leader>qf  <Plug>(coc-fix-current)

    " Use `:Format` for format current buffer
    command! -nargs=0 Format :call CocAction('format')

    " Use `:Fold` for fold current buffer
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)


    " Add diagnostic info for https://github.com/itchyny/lightline.vim
    let g:lightline = {
          \ 'colorscheme': 'wombat',
          \ 'active': {
          \   'left': [ [ 'mode', 'paste' ],
          \             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
          \ },
          \ 'component_function': {
          \   'cocstatus': 'coc#status'
          \ },
          \ }



    " Using CocList
    " Show all diagnostics
    nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
    " Manage extensions
    nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
    " Show commands
    nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
    " Find symbol of current document
    nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
    " Search workspace symbols
    nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
    " Do default action for next item.
    nnoremap <silent> <space>j  :<C-u>CocNext<CR>
    " Do default action for previous item.
    nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
    " Resume latest coc list
    nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

Plug 'SirVer/ultisnips'
    let g:UltiSnipsExpandTrigger="<c-j>"
    let g:UltiSnipsSnippetsDir="~/.vim/plugged/wr_vim/UltiSnips/"
    let g:UltiSnipsEnableSnipMate=1
    let g:UltiSnipsSnippetDirectories=["UltiSnips"]

Plug 'honza/vim-snippets'
Plug 'tpope/vim-surround'
"}}}
" 注释{{{2
Plug 'scrooloose/nerdcommenter'
"}}}
" 对齐{{{2
Plug 'junegunn/vim-easy-align'
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)
    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
"}}}
" Markdown{{{2
Plug 'plasticboy/vim-markdown'
    let g:vim_markdown_toc_autofit = 1
    "let g:vim_markdown_folding_style_pythonic = 1
    let g:html_wrong_comments=1
    "let g:vim_markdown_new_list_item_indent = 0

Plug 'kannokanno/previm'
    let g:previm_custom_css_path='~/.vim/plugged/wr_vim/previm.css'
    let g:previm_open_cmd='open'
"}}}
" UML{{{2
Plug 'scrooloose/vim-slumlord'
Plug 'aklt/plantuml-syntax'
    let g:plantuml_executable_script='~/.vim/plantuml/plantuml.sh'
"}}}
" Misc {{{2
Plug 'easymotion/vim-easymotion'
    let g:EasyMotion_keys = 'abcdefghijklmnopqrstuvwxyz'
    let g:EasyMotion_smartcase = 1
" }}}
" Color Theme{{{2
Plug 'dragfire/Improved-Syntax-Highlighting-Vim'
"Plug 'lmintmate/blue-mood-vim'
"Plug 'NLKNguyen/papercolor-theme'
"Plug 'dracula/vim'
Plug 'sonph/onehalf', {'rtp': 'vim'}
"Plug 'hukl/Smyck-Color-Scheme'
"Plug 'tomasr/molokai'
"}}}

call plug#end()

filetype plugin indent on
syntax enable

" 优化 Denite 颜色"
call denite#custom#option('_', {
      \ 'highlight_mode_normal': 'Search',
      \ 'highlight_mode_insert': 'Search'
      \ })
"}}}

" Operation {{{1
set foldlevel=99
set clipboard+=unnamed
set autoread
set fileencodings=utf-8,gbk,ucs-bom,cp936,gb18030,big5,latin1
set modeline
set modelines=3
set smartcase
set ignorecase
set hlsearch
set incsearch
set wildmode=full
set mouse=a
"set tags=./.tags;,.tags
set iskeyword=-,@,48-57,_,192-255
"set macmeta
" make 前自动保存
set autowrite

vnoremap < <gv
vnoremap > >gv
nnoremap n nzz
nnoremap N Nzz
nnoremap <2-LeftMouse> za

"inoremap jj <ESC>

"noremap! <c-a> <Home>
"noremap! <c-e> <End>
"noremap! <c-f> <Right>
"noremap! <c-b> <Left>
"noremap! <c-j> <Down>
"noremap! <c-k> <Up>
"noremap! <c-d> <Del>

" previous buffer
nnoremap gp :bp<cr>
" next buffer
nnoremap gn :bn<cr>
" last buffer
nnoremap go <c-^>
" previous tab, the key of next tab is default: gt
nnoremap gb gT


" change to current directory
nnoremap <silent> <leader>cd :lcd %:h<CR>

nnoremap 0 :call wr#ToggleHomeZero()<CR>

" terminal 
tnoremap <esc> <c-w>N
"}}}
" Ui{{{1
set statusline=\ %F%m%r%h%w\ %=%(%{&ff}\|%{(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\")}%k\|%Y%)\ %([%l,%v][%p%%]\ %)
"set synmaxcol=200
let loaded_matchparen = 1
set belloff=all

set directory=/tmp
set hidden

" Better display for messages
"set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
"set signcolumn=yes
set cursorline

set splitbelow
set previewheight=8
colorscheme onehalfdark

"set nu

if has('gui_running')
    " 透明
    set transparency=0
    " 模糊
    set blurradius=0
    set linespace=1
    set guioptions='egk'
    set guifont=menlo:h12
    "colorscheme onehalfdark
else
    "set term=builtin_ansi
endif
" not display ~ for blank line
"highlight EndOfBuffer ctermfg=black guifg=bg
nnoremap <silent> <leader>vs :terminal<CR>

"}}}
" FileType {{{1
autocmd FileType c,cpp setlocal ai ts=4 sw=4 fdm=syntax
autocmd FileType go setlocal ai ts=4 sw=4
autocmd FileType java setlocal et ai ts=4 sw=4 tw=120 fdm=indent
"autocmd FileType lua setlocal ai ts=4 sw=4 et
autocmd FileType python setlocal fdm=indent ai ts=4 sw=4 et
autocmd FileType markdown setlocal ts=4 sw=4 fdm=indent et
autocmd FileType nginx setlocal ai ts=4 sw=4
autocmd FileType sh setlocal ai ts=4 sw=4 et
autocmd FileType snippets setlocal ts=4 sw=4
autocmd FileType vim setlocal ts=4 sw=4 et fdm=marker
autocmd FileType xml,html,css setlocal fdm=indent ai ts=2 sw=2
autocmd FileType yaml setlocal fdm=indent ai ts=2 sw=2 et
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.tsx
autocmd FileType javascript,json,typescript setlocal ai ts=2 sw=2 fdm=indent

" default filetype
autocmd BufEnter * if &filetype == "" | setlocal ft=text | endif
" }}}
