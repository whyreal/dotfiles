" Package Manager {{{1

" use python3
if has('python3')
endif

call plug#begin('~/.vim/plugged')

" basic plugins{{{2
let mapleader=","
Plug 'tpope/vim-sensible'
Plug '~/code/whyreal/wr_vim'
Plug '~/code/whyreal/vim-template'
"}}}
" 输入法切换{{{2
Plug 'ybian/smartim'
"Plug 'rlue/vim-barbaric'
    "let g:barbaric_default = 2
    "let g:barbaric_scope = 'buffer'
"}}}
" 导航{{{2
Plug 'christoomey/vim-tmux-navigator'
Plug 'scrooloose/nerdtree'
    nnoremap <leader>ve :NERDTreeToggle<CR>
    let NERDTreeShowBookmarks = 0
    let NERDTreeBookmarksSort = 0

Plug 'vim-voom/VOoM'
    let g:voom_tree_placement = 'right'
    let g:voom_ft_modes = {'markdown': 'pandoc'}
    let g:voom_always_allow_move_left = 1
    au BufRead * call wr#DetectVoomType()
    nnoremap <silent> <leader>vv :VoomToggle<CR>

Plug 'majutsushi/tagbar'
    nnoremap <leader>vt :TagbarToggle<cr>

"}}}
" 自动补全{{{2

Plug 'neoclide/coc.nvim' , {'tag': '*', 'do': { -> coc#util#install()}}
    " if hidden is not set, TextEdit might fail.
    set hidden

    " Better display for messages
    "set cmdheight=2

    " Smaller updatetime for CursorHold & CursorHoldI
    set updatetime=300

    " don't give |ins-completion-menu| messages.
    set shortmess+=c

    " always show signcolumns
    "set signcolumn=yes

    " Use tab for trigger completion with characters ahead and navigate.
    " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> for trigger completion.
    inoremap <silent><expr> <c-space> coc#refresh()

    " Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
    " Coc only does snippet and additional edit on confirm.
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

    " Use `[c` and `]c` for navigate diagnostics
    nmap <silent> [c <Plug>(coc-diagnostic-prev)
    nmap <silent> ]c <Plug>(coc-diagnostic-next)

    " Remap keys for gotos
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K for show documentation in preview window
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if &filetype == 'vim'
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction

    " Highlight symbol under cursor on CursorHold
    autocmd CursorHold * silent call CocActionAsync('highlight')
    

    " Remap for rename current word
    nmap <leader>rn <Plug>(coc-rename)

    " Remap for format selected region
    vmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
      autocmd!
      " Setup formatexpr specified filetype(s).
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
    vmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap for do codeAction of current line
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Fix autofix problem of current line
    nmap <leader>qf  <Plug>(coc-fix-current)

    " Use `:Format` for format current buffer
    command! -nargs=0 Format :call CocAction('format')

    " Use `:Fold` for fold current buffer
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " Add diagnostic info for https://github.com/itchyny/lightline.vim
    let g:lightline = {
          \ 'colorscheme': 'wombat',
          \ 'active': {
          \   'left': [ [ 'mode', 'paste' ],
          \             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
          \ },
          \ 'component_function': {
          \   'cocstatus': 'coc#status'
          \ },
          \ }

    " Using CocList
    " Show all diagnostics
    nnoremap <silent> <leader>a  :<C-u>CocList diagnostics<cr>
    " Manage extensions
    nnoremap <silent> <leader>e  :<C-u>CocList extensions<cr>
    " Show commands
    nnoremap <silent> <leader>c  :<C-u>CocList commands<cr>
    " Find symbol of current document
    nnoremap <silent> <leader>o  :<C-u>CocList outline<cr>
    " Search workspace symbols
    nnoremap <silent> <leader>s  :<C-u>CocList -I symbols<cr>

    " Search
    "nnoremap <leader>s  <Plug>(coc-workspaceSymbols)

    " Do default action for next item.
    nnoremap <silent> <leader>j  :<C-u>CocNext<CR>
    " Do default action for previous item.
    nnoremap <silent> <leader>k  :<C-u>CocPrev<CR>
    " Resume latest coc list
    nnoremap <silent> <leader>p  :<C-u>CocListResume<CR>

Plug 'SirVer/ultisnips'
    let g:UltiSnipsExpandTrigger="<c-j>"
    let g:UltiSnipsSnippetsDir="~/code/whyreal/wr_vim/UltiSnips"
    let g:UltiSnipsEnableSnipMate=1
    let g:UltiSnipsSnippetDirectories=["UltiSnips"]

Plug 'honza/vim-snippets'
Plug 'tpope/vim-surround'
"}}}
" 注释{{{2
Plug 'scrooloose/nerdcommenter'
"}}}
" 对齐{{{2
Plug 'junegunn/vim-easy-align'
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)
    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
"}}}
" 前端 {{{2
Plug 'leafgarland/typescript-vim'
"Plug 'chemzqm/wxapp.vim'
Plug 'vim-scripts/Emmet.vim'
let g:user_emmet_settings = {
  \  'javascript.jsx' : {
    \      'extends' : 'jsx',
    \  },
  \}
"}}}
" Markdown{{{2
Plug 'plasticboy/vim-markdown'
    let g:vim_markdown_toc_autofit = 1
    "let g:vim_markdown_folding_style_pythonic = 1
    let g:html_wrong_comments=1
    "let g:vim_markdown_new_list_item_indent = 0

"Plug 'kannokanno/previm'
"    let g:previm_custom_css_path='~/code/whyreal/wr_vim/previm.css'
"    let g:previm_open_cmd='open'

Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install' }
let g:mkdp_auto_close = 0
let g:mkdp_refresh_slow = 1
let g:mkdp_preview_options = {
    \   'uml': {
    \     'openMarker': '```puml',
    \     'closeMarker': '```',
    \   },
    \   'disable_sync_scroll': 1,
    \ }

"}}}
" UML{{{2
Plug 'scrooloose/vim-slumlord'
Plug 'aklt/plantuml-syntax'
    let g:plantuml_executable_script='~/.vim/plantuml/plantuml.sh'
"}}}
" Misc {{{2
"Plug 'Glench/Vim-Jinja2-Syntax'
"Plug 'justinmk/vim-sneak'
    "map f <Plug>Sneak_f
    "map F <Plug>Sneak_F
    "map t <Plug>Sneak_t
    "map T <Plug>Sneak_T
Plug 'easymotion/vim-easymotion'
    let g:EasyMotion_keys = 'ertyuidfghjkcvbnm,'
    let g:EasyMotion_smartcase = 1
    map m <Plug>(easymotion-prefix)
" }}}
" Color Theme{{{2
"Plug 'dragfire/Improved-Syntax-Highlighting-Vim'
"Plug 'lmintmate/blue-mood-vim'
"Plug 'NLKNguyen/papercolor-theme'
"Plug 'dracula/vim'
Plug 'sonph/onehalf', {'rtp': 'vim'}
"Plug 'hukl/Smyck-Color-Scheme'
"Plug 'tomasr/molokai'

"}}}

call plug#end()

filetype plugin indent on
syntax enable

" Operation {{{1
set foldlevel=99
set clipboard+=unnamed
set fileencodings=utf-8,gbk,ucs-bom,cp936,gb18030,big5,latin1
set modeline
set modelines=3
set smartcase
set ignorecase
set hlsearch
set incsearch
set wildmode=full
set mouse=a
set ttymouse=xterm2
set iskeyword=-,@,48-57,_,192-255
"set macmeta
" make 前自动保存
set autowrite
set autoread

vnoremap < <gv
vnoremap > >gv
nnoremap n nzz
nnoremap N Nzz
"nnoremap <2-LeftMouse> za

inoremap jj <ESC>

noremap! <c-a> <Home>
noremap! <c-e> <End>
noremap! <c-f> <Right>
noremap! <c-b> <Left>
noremap! <c-n> <Down>
noremap! <c-p> <Up>
"noremap! <c-d> <Del>
inoremap <c-k> <c-o>D
 

" previous buffer
nnoremap gp :bp<cr>
" next buffer
nnoremap gn :bn<cr>
" last buffer
nnoremap go <c-^>
" previous tab, the key of next tab is default: gt
nnoremap gb gT

" change to current directory
nnoremap <silent> <leader>cd :lcd %:h<CR>

nnoremap 0 :call wr#ToggleHomeZero()<CR>

" terminal 
tnoremap <esc> <c-w>N

"}}}
" Ui{{{1

function! StatusDiagnostic() abort
  let info = get(b:, 'coc_diagnostic_info', {})
  if empty(info) | return '' | endif
  let msgs = []
  if get(info, 'error', 0)
    call add(msgs, 'E' . info['error'])
  endif
  if get(info, 'warning', 0)
    call add(msgs, 'W' . info['warning'])
  endif
  return join(msgs, ' '). ' ' . get(g:, 'coc_status', '')
endfunction

set statusline=\ %t%m%r%h%w%{StatusDiagnostic()}\ %=%(%{&ff}\|%{(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\")}%k\|%Y%)
"set statusline=\ %t%m%r%h%w%{StatusDiagnostic()}\ %=%(%{&ff}\|%{(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\")}%k\|%Y%)\ %([%l,%v][%p%%]\ %)
"set synmaxcol=200
let loaded_matchparen = 1
set belloff=all

set directory=/tmp
set hidden

"set cursorline

set splitbelow
set previewheight=8
colorscheme smyck

if has('gui_running')
    " 透明
    set transparency=20
    " 模糊
    set blurradius=10
    set linespace=1
    set guioptions='egk'
    set guifont=menlo:h13
else
    "set term=builtin_ansi
endif

nnoremap <silent> <leader>vs :terminal<CR>

"}}}
" FileType {{{1
"autocmd FileType c,cpp setlocal ai ts=4 sw=4 fdm=syntax
autocmd FileType go setlocal ai ts=4 sw=4 fdm=indent
autocmd FileType java setlocal et ai ts=4 sw=4 tw=120 fdm=indent
"autocmd FileType lua setlocal ai ts=4 sw=4 et
autocmd FileType python setlocal fdm=indent ai ts=4 sw=4 et
autocmd FileType markdown setlocal ts=4 sw=4 fdm=indent
autocmd FileType nginx setlocal ai ts=4 sw=4
autocmd FileType sh setlocal ai ts=4 sw=4 et
autocmd FileType snippets setlocal ts=4 sw=4
autocmd FileType vim setlocal ts=4 sw=4 et fdm=marker
autocmd FileType xml,html,css setlocal fdm=indent ai ts=2 sw=2
autocmd FileType yaml setlocal fdm=indent ai ts=2 sw=2 et
autocmd BufNewFile,BufRead *.tsx set filetype=typescript.tsx
autocmd BufNewFile,BufRead *.jsx set filetype=javascript.jsx
autocmd FileType json setlocal ai ts=2 sw=2 fdm=indent
autocmd FileType javascript,typescript.tsx setlocal ai ts=4 sw=4 fdm=indent

" default filetype
autocmd BufEnter * if &filetype == "" | setlocal ft=text | endif

" }}}

" Cabbreviate {{{1
" run command in register *
nnoremap <silent> <leader>rr :@*<cr>

cabbrev h tab h
"}}}
hi default CocHighlightText  guibg=darkyellow guifg=red ctermbg=223 ctermfg=red
