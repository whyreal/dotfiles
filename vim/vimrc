" Bundles
    if has('vim_starting')
        set nocompatible               " Be iMproved
    set runtimepath+=/Users/Real/.vim/bundle/neobundle.vim/
    endif
    call neobundle#begin(expand('/Users/Real/.vim/bundle'))
    NeoBundleFetch 'Shougo/neobundle.vim'
    NeoBundle 'tpope/vim-sensible'
    NeoBundle 'whyreal/wr_vim'
    NeoBundle 'scrooloose/nerdtree'
    "set macmeta

    "NeoBundle 'fholgado/minibufexpl.vim'
    "NeoBundle 'Shougo/denite.nvim'

    " tmux
    NeoBundle 'christoomey/vim-tmux-navigator'

    " snippets
    NeoBundle 'SirVer/ultisnips'
    let g:UltiSnipsSnippetsDir="~/.vim/bundle/wr_vim/UltiSnips/"
    let g:UltiSnipsEnableSnipMate=0

    " doc plugins
    NeoBundle 'plasticboy/vim-markdown'
    NeoBundle 'vim-scripts/VOoM'
    NeoBundle 'kannokanno/previm'
    let g:previm_open_cmd = 'open'
    "let g:previm_custom_css_path = '/Users/kanno/tmp/some.css'

    " developmnet plugins
    "NeoBundle 'tpope/vim-surround'
    "NeoBundle 'majutsushi/tagbar'
    "NeoBundle 'Glench/Vim-Jinja2-Syntax'
    "NeoBundle 'vim-syntastic/syntastic'
    "set statusline+=%#warningmsg#
    "set statusline+=%{SyntasticStatuslineFlag()}
    "set statusline+=%*
    "let g:syntastic_always_populate_loc_list = 1
    "let g:syntastic_auto_loc_list = 1
    "let g:syntastic_check_on_open = 1
    "let g:syntastic_check_on_wq = 0
    "let g:syntastic_mode_map = {
    "    \ "mode": "passive",
    "    \ "active_filetypes": [],
    "    \ "passive_filetypes": [] }
    "NeoBundle 'fatih/vim-go'
    "NeoBundle 'junegunn/vim-easy-align'

    " Man page
    runtime! ftplugin/man.vim
    let g:ft_man_open_mode = 'tab'
    "autocmd FileType man setlocal foldmethod=indent foldenable
    "NeoBundle 'vim-scripts/info.vim'

    call neobundle#end()
    filetype plugin indent on
    syntax on

" Edit
    set clipboard+=unnamed         " yank and paste with the system clipboard
    set autoread
    set fileencodings=utf-8,gbk,ucs-bom,cp936,gb18030,big5,euc-jp,euc-kr,latin1

    vnoremap < <gv
    vnoremap > >gv
    nnoremap q; q:

    " Auto change input method (gui only)
    if has('gui_running')
        set noimdisable
        set iminsert=0
        set imsearch=0
    endif

    " ModeLine
    set modeline
    set modelines=3

" Ui
    set statusline=\ %f%m%r%h%w\ %=%(%{&ff}\|%{(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\")}%k\|%Y%)\ %([%l,%v][%p%%]\ %)
    if has('gui_running')
        " disable error bells
        set vb t_vb=
        set cursorline
    endif
    colorscheme desert
    set guifont=menlo:h12
    set directory=/tmp
    set hidden

    set mouse=a
    nnoremap <2-LeftMouse> za

" Search
    set smartcase
    set ignorecase
    set hlsearch
    set incsearch
    set wildmode=full

" auto update pac file
au BufWrite ~/.ShadowsocksX/user-rule.txt !genpac --format=pac --pac-proxy="SOCKS5 127.0.0.1:1080; SOCKS 127.0.0.1:1080; DIRECT;" --user-rule-from=.ShadowsocksX/user-rule.txt > .ShadowsocksX/gfwlist.js

" Autocommand
    " strip for end of line
    "au BufWrite * %s/[ \t][ \t]*$//ge

" vim: ts=4 sw=4
