" 修改 macvim shell, 解决无法加载 shell 环境变量的问题
"defaults write org.vim.MacVim MMLoginShellCommand /bin/zsh

" Package Manager {{{1
call plug#begin('~/.vim/plugged')

let mapleader=","

"Vim sugar for the UNIX shell commands that need it the most. Features include:
"
"    :Delete: Delete a buffer and the file on disk simultaneously.
"    :Unlink: Like :Delete, but keeps the now empty buffer.
"    :Move: Rename a buffer and the file on disk simultaneously.
"    :Rename: Like :Move, but relative to the current file's containing directory.
"    :Chmod: Change the permissions of the current file.
"    :Mkdir: Create a directory, defaulting to the parent of the current file.
"    :Cfind: Run find and load the results into the quickfix list.
"    :Clocate: Run locate and load the results into the quickfix list.
"    :Lfind/:Llocate: Like above, but use the location list.
"    :Wall: Write every open window. Handy for kicking off tools like guard.
"    :SudoWrite: Write a privileged file with sudo.
"    :SudoEdit: Edit a privileged file with sudo.
"    File type detection for sudo -e is based on original file name.
"    New files created with a shebang line are automatically made executable.
Plug 'tpope/vim-eunuch'

" COC{{{2
Plug 'neoclide/coc.nvim' , {'branch': 'release'}
    " if hidden is not set, TextEdit might fail.
    set hidden

    " Better display for messages
    "set cmdheight=2

    " Smaller updatetime for CursorHold & CursorHoldI
    set updatetime=300

    " don't give |ins-completion-menu| messages.
    set shortmess+=c

    " always show signcolumns
    "set signcolumn=yes

    " Use tab for trigger completion with characters ahead and navigate.
    " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> for trigger completion.
    inoremap <silent><expr> <c-space> coc#refresh()

    " Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
    " Coc only does snippet and additional edit on confirm.
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

    " Use `[c` and `]c` for navigate diagnostics
    nmap <silent> [c <Plug>(coc-diagnostic-prev)
    nmap <silent> ]c <Plug>(coc-diagnostic-next)

    " Remap keys for gotos
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K for show documentation in preview window
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if &filetype == 'vim'
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction

    " Highlight symbol under cursor on CursorHold
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Remap for rename current word
    nmap <leader>rn <Plug>(coc-rename)

    " Remap for format selected region
    vmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
      autocmd!
      " Setup formatexpr specified filetype(s).
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
    vmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap for do codeAction of current line
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Fix autofix problem of current line
    nmap <leader>qf  <Plug>(coc-fix-current)

    " Use `:Format` for format current buffer
    command! -nargs=0 Format :call CocAction('format')

    " Use `:Fold` for fold current buffer
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " Using CocList
    " Show all diagnostics
    nnoremap <silent> <leader>la  :<C-u>CocList diagnostics<cr>
    " Manage extensions
    nnoremap <silent> <leader>le  :<C-u>CocList extensions<cr>
    " Show commands
    nnoremap <silent> <leader>lc  :<C-u>CocList commands<cr>
    " Find symbol of current document
    nnoremap <silent> <leader>lo  :<C-u>CocList outline<cr>
    " Search workspace symbols
    nnoremap <silent> <leader>ls  :<C-u>CocList --ignore-case -N -I symbols<cr>
    nnoremap <silent> <leader>lb  :<C-u>CocList --ignore-case -N buffers<cr>
    nnoremap <silent> <leader>b  :<C-u>CocList --ignore-case -N buffers<cr>
    nnoremap <silent> <leader>lf  :<C-u>CocList --ignore-case files<cr>
    nnoremap <silent> <leader>f  :<C-u>CocList --ignore-case files<cr>
    nnoremap <silent> <leader>lr  :<C-u>CocList --ignore-case -N mru<cr>
    nnoremap <silent> <leader>lm  :<C-u>CocList --ignore-case -N marks<cr>
    " Search
    nnoremap <leader>s  <Plug>(coc-workspaceSymbols)
    " Do default action for next item.
    nnoremap <silent> <leader>j  :<C-u>CocNext<CR>
    " Do default action for previous item.
    nnoremap <silent> <leader>k  :<C-u>CocPrev<CR>
    " Resume latest coc list
    nnoremap <silent> <leader>p  :<C-u>CocListResume<CR>

    function! StatusDiagnostic() abort
      let info = get(b:, 'coc_diagnostic_info', {})
      if empty(info) | return '' | endif
      let msgs = []
      if get(info, 'error', 0)
        call add(msgs, 'E' . info['error'])
      endif
      if get(info, 'warning', 0)
        call add(msgs, 'W' . info['warning'])
      endif
      return join(msgs, ' '). ' ' . get(g:, 'coc_status', '')
    endfunction

    set statusline=\ %t%m%r%h%w%{StatusDiagnostic()}\ %=%(%{&ff}\|%{(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\")}%k\|%Y%)
    " coc-git
    set statusline^=%{get(g:,'coc_git_status','')}%{get(b:,'coc_git_status','')}%{get(b:,'coc_git_blame','')}
    "set statusline=\ %t%m%r%h%w%{StatusDiagnostic()}\ %=%(%{&ff}\|%{(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\")}%k\|%Y%)\ %([%l,%v][%p%%]\ %)

    hi default CocHighlightText  guibg=darkyellow guifg=red ctermbg=223 ctermfg=red

    " Create markmap from the whole file
    nmap <Leader>vm <Plug>(coc-markmap-create)
    " Create markmap from the selected lines
    vmap <Leader>vm <Plug>(coc-markmap-create-v)

" coc-snippet {{{3
" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)
"}}}
"}}}
" 导航{{{2

let g:netrw_list_hide='\(^\|\s\s\)\zs\.\S\+'
let g:netrw_winsize=30
"let g:netrw_liststyle=3 "tree

Plug 'christoomey/vim-tmux-navigator'
Plug 'vim-voom/VOoM'
    let g:voom_tree_placement = 'right'
    let g:voom_ft_modes = {'markdown': 'pandoc', 'vim': 'fmr'}
    let g:voom_always_allow_move_left = 1
    nnoremap <silent> <leader>vv :VoomToggle<CR>
Plug 'majutsushi/tagbar'
    nnoremap <leader>vt :TagbarToggle<cr>
    nnoremap <leader>t :TagbarToggle<cr>
Plug 'easymotion/vim-easymotion'
	"map <leader><leader> <Plug>(easymotion-prefix)
"}}}
" 补全{{{2
"Plug 'wellle/tmux-complete.vim'
"    let g:tmuxcomplete#trigger = 'omnifunc'
Plug 'honza/vim-snippets'
Plug 'tpope/vim-surround'
"}}}
" 注释{{{2
Plug 'scrooloose/nerdcommenter'
"}}}
" 对齐{{{2
Plug 'junegunn/vim-easy-align'
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)
    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
"}}}
" Markdown{{{2
Plug 'lvht/tagbar-markdown'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }
Plug 'godlygeek/tabular'

Plug 'plasticboy/vim-markdown'
    "let g:vim_markdown_toc_autofit = 1
	"let g:vim_markdown_folding_style_pythonic = 1
    "let g:vim_markdown_override_foldtext = 0
    let g:html_wrong_comments=1
    "let g:vim_markdown_new_list_item_indent = 0
	" Highlight YAML front matter as used by Jekyll or Hugo.
	"let g:vim_markdown_frontmatter = 1
"}}}
" Misc {{{2
Plug 'ekalinin/Dockerfile.vim'
Plug 'chr4/nginx.vim'
"Plug 'jpalardy/vim-slime'
    "let g:slime_target = "tmux"
    "let g:slime_paste_file = "$HOME/.slime_paste"
    "let g:slime_default_config = {"socket_name": "default", "target_pane": "{right-of}"}
" }}}
" Color Theme{{{2
Plug 'NLKNguyen/papercolor-theme'
Plug 'challenger-deep-theme/vim'
"}}}

call plug#end()

filetype plugin indent on
syntax enable
" }}}
" Command {{{1
command! Dos2unix e ++ff=unix | %s/\r//g
command! Ssconfig tabe ~/.ShadowsocksX/user-rule.txt
command! Sshconfig tabe ~/Documents/Note/scripts/ssh.config.json
command! VimrcEdit tabe ~/.config/nvim/init.vim
command! VimrcReload so ~/.config/nvim/init.vim
" }}}
" Autocmd {{{1
"autocmd FileType c,cpp setlocal ts=4 sw=4 fdm=syntax
autocmd FileType go setlocal ts=4 sw=4 fdm=syntax
autocmd FileType java,groovy setlocal ts=4 sw=4 tw=120
autocmd FileType python,yaml,lua,sh,vim setlocal ts=4 sw=4 fdm=indent
autocmd FileType markdown setlocal et ts=4 sw=4
" fix list 中 ”<" 高亮错误
autocmd FileType markdown syn cluster htmlTop contains=@Spell,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLink,javaScript,@htmlPreproc
" 嵌套 fold
"autocmd FileType markdown set foldexpr=NestedMarkdownFolds()
autocmd FileType nginx setlocal ts=4 sw=4
autocmd FileType snippets setlocal ts=4 sw=4
autocmd FileType jsp,xml,html,css setlocal ts=2 sw=2
autocmd FileType javascript,typescript.tsx,json setlocal ts=2 sw=2
autocmd BufNewFile,BufRead *.tsx set filetype=typescript.tsx
autocmd BufNewFile,BufRead *.jsx set filetype=javascript.jsx
autocmd BufNewFile,BufRead *.docker set filetype=Dockerfile
" default filetype
autocmd BufEnter * if &filetype == "" | setlocal ft=text | endif

au BufWritePost ~/.ShadowsocksX/user-rule.txt
            \ !genpac --format=pac
            \ --pac-proxy="SOCKS5 127.0.0.1:1080; SOCKS 127.0.0.1:1080; DIRECT;"
            \ --user-rule-from=~/.ShadowsocksX/user-rule.txt
            \ --gfwlist-proxy="SOCKS5 127.0.0.1:1080;"
            \ > ~/.ShadowsocksX/gfwlist.js
au BufWritePost ~/Documents/Note/scripts/ssh.config.json
            \ !cd ~/Documents/Note/scripts/
            \ && ./template.rander.lua ssh.config.lrt ssh.config.json
            \ > ~/.ssh/config
            \ && ./template.rander.lua ssh.config.hosts.lrt ssh.config.json
            \ > ~/.ssh/config_hosts

" }}}
" Map {{{1
"nnoremap q; q:
noremap! <c-a> <Home>
noremap! <c-e> <End>
inoremap <c-f> <Right>
noremap! <c-b> <Left>
noremap! <c-n> <Down>
noremap! <c-p> <Up>

"inoremap <c-k> <c-o>D

"nnoremap j gj
"nnoremap k gk

" previous buffer
"nnoremap gp :bp<cr>
" next buffer
"nnoremap gn :bn<cr>
" last buffer
"nnoremap go <c-^>
" previous tab, the key of next tab is default: gt
"nnoremap gb gT

" change to current directory
"nnoremap <leader>cd :lcd %:h<CR>

" terminal 
"tnoremap <esc> <c-w>N
"nnoremap <silent> <leader>vs :terminal<CR>

" save
nnoremap <leader>w :w<cr>
nnoremap <leader>qq :q<cr>
inoremap jj <esc>

nnoremap <leader>ve :Explore<CR>

" }}}
" Options && Variables {{{1
set clipboard+=unnamedplus

set cursorline
set number relativenumber
"set foldlevel=99
set fileencodings=utf-8,gbk,ucs-bom,cp936,gb18030,big5,latin1
set modeline modelines=3
set smartcase ignorecase
set mouse+=a
"set macmeta
" make 前自动保存
"set autowrite

" 命令窗口
"set cmdwinheight=20

"set synmaxcol=200
let loaded_matchparen = 1

set hidden

set splitbelow
set previewheight=8
set colorcolumn=+1
set bg=light
"set tgc

if has('gui_running')
	set bg=dark
    set cursorline
	if !has('nvim')
		set guifont=Menlo:h14
		"set guifont=Menlo-Bold:h14
		" 透明
		"set transparency=30
		" 模糊
		"set blurradius=20
		"set linespace=1
		"set guifontwide=MicrosoftYaHei-Bold
		set guioptions=egtk
	endif
endif

colorscheme PaperColor

"}}}
" Cabbreviate {{{1
cabbrev h tab h
"}}}
" Lua {{{1
if has('nvim')
    lua package.path = package.path .. ";" ..  "/usr/local/share/lua/5.3/?.lua;/usr/local/share/lua/5.3/?/init.lua;/usr/local/lib/lua/5.3/?.lua;/usr/local/lib/lua/5.3/?/init.lua;./?.lua;./?/init.lua"
    lua require("utils")
else
	set ttymouse=xterm2
	if has('lua')
		lua package.path = package.path .. ";" .. os.getenv("HOME") .. "/.vim/lua/?.lua"
		lua require("utils")
	endif
endif

command! Docs lua cd_workspace("~/Documents/vim-workspace/docs")
command! DotFiles lua cd_workspace("~/code/whyreal/dotfiles/")
nnoremap 0 :lua toggle_home_zero()<CR>
function! OpenWithSystemApp(coc_list_context)
	call luaeval('coc_list_open_file_with(unpack(_A))', [a:coc_list_context, "open"])
endfunction

function! OpenWithFinder(coc_list_context)
	call luaeval('coc_list_open_file_with(unpack(_A))', [a:coc_list_context, "open -R"])
endfunction

command! -range TemplateRender call luaeval('template_render(unpack(_A))', [<line1>, <line2>])
command! -range TemplateSet call luaeval('template_set(unpack(_A))', [<line1>, <line2>])
"noremap o :lua add_blank_line_after()<cr>
"noremap O :lua add_blank_line_before()<cr>

"command! -nargs=1 Edit lua edit_remote_file(<f-args>)
"command! ServerUpdateInfo lua update_server_info()
"}}}
" vim: fdm=marker
