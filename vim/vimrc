" 修改 macvim shell, 解决无法加载 shell 环境变量的问题
"defaults write org.vim.MacVim MMLoginShellCommand /bin/zsh

let g:loaded_python_provider = 0
let g:loaded_ruby_provider = 0
let g:loaded_perl_provider = 0

" Package Manager {{{1
lua vim.fn["plug#begin"]('~/.vim/plugged')

let mapleader=","

" Translator {{{2
" https://github.com/voldikss/vim-translator
"let g:translator_default_engines = ['baicizhan', 'bing', 'google', 'haici', 'youdao']
let g:translator_default_engines = ['bing', 'google']
"let g:translator_window_type='preview'
let g:translator_history_enable=v:true
Plug 'voldikss/vim-translator'

	""" Configuration example
	" Echo translation in the cmdline
	nmap <silent> <Leader>tc <Plug>Translate
	vmap <silent> <Leader>tc <Plug>TranslateV
	" Display translation in a window
	nmap <silent> <Leader>tw <Plug>TranslateW
	vmap <silent> <Leader>tw <Plug>TranslateWV
	nmap <silent> <Space>w <Plug>TranslateW
	vmap <silent> <Space>w <Plug>TranslateWV
	" Replace the text with translation
	nmap <silent> <Leader>tr <Plug>TranslateR
	vmap <silent> <Leader>tr <Plug>TranslateRV
	" Translate the text in clipboard
	"nmap <silent> <Leader>x <Plug>TranslateX
"}}}
" Terminal {{{2
Plug 'christoomey/vim-tmux-navigator'
" https://github.com/habamax/vim-sendtoterm
Plug 'habamax/vim-sendtoterm'

"}}}
" COC{{{2

"let g:coc_start_at_startup = 1

Plug 'neoclide/coc.nvim' , {'branch': 'release'}
    " if hidden is not set, TextEdit might fail.
    set hidden

    " Better display for messages
    "set cmdheight=2

    " Smaller updatetime for CursorHold & CursorHoldI
    set updatetime=300

    " don't give |ins-completion-menu| messages.
    set shortmess+=c

    " always show signcolumns
    "set signcolumn=yes

    " Use tab for trigger completion with characters ahead and navigate.
    " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> for trigger completion.
    inoremap <silent><expr> <c-space> coc#refresh()

    " Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
    " Coc only does snippet and additional edit on confirm.
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

    " Use `[c` and `]c` for navigate diagnostics
    nmap <silent> [c <Plug>(coc-diagnostic-prev)
    nmap <silent> ]c <Plug>(coc-diagnostic-next)

    " Remap keys for gotos
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)


    " Use K for show documentation in preview window
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if &filetype == 'vim'
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction

    " Highlight symbol under cursor on CursorHold
    autocmd CursorHold * silent call CocActionAsync('highlight')

    " Remap for rename current word
    nmap <leader>rn <Plug>(coc-rename)

    " Remap for format selected region
    "vmap <leader>f  <Plug>(coc-format-selected)
    "nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
      autocmd!
      " Setup formatexpr specified filetype(s).
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
    vmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap for do codeAction of current line
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Fix autofix problem of current line
    nmap <leader>qf  <Plug>(coc-fix-current)

    " Use `:Format` for format current buffer
    command! -nargs=0 Format :call CocAction('format')

    " Use `:Fold` for fold current buffer
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " Using CocList
    " Show all diagnostics
    nnoremap <silent> <leader>la  :<C-u>CocList diagnostics<cr>
    " Manage extensions
    nnoremap <silent> <leader>le  :<C-u>CocList extensions<cr>
    nnoremap <silent> <leader>lp  :<C-u>CocList project<cr>
    " Show commands
    nnoremap <silent> <leader>lc  :<C-u>CocList commands<cr>
    " Find symbol of current document
    nnoremap <silent> <leader>lo  :<C-u>CocList outline<cr>
    " Search workspace symbols
    nnoremap <silent> <leader>ls  :<C-u>CocList --ignore-case -N -I symbols<cr>
    "nnoremap <silent> <leader>lb  :<C-u>CocList --ignore-case -N buffers<cr>
    "nnoremap <silent> <leader>f  :<C-u>CocList --ignore-case files<cr>
    nnoremap <silent> <leader>lr  :<C-u>CocList --ignore-case -N mru<cr>
    "nnoremap <silent> <leader>lm  :<C-u>CocList --ignore-case -N marks<cr>
	" grep
    nnoremap <leader>lg  :<C-u>CocList --ignore-case -N grep
    " Search
    nnoremap <leader>s  <Plug>(coc-workspaceSymbols)
    " Do default action for next item.
    nnoremap <silent> <leader>j  :<C-u>CocNext<CR>
    " Do default action for previous item.
    nnoremap <silent> <leader>k  :<C-u>CocPrev<CR>
    " Resume latest coc list
    nnoremap <silent> <leader>p  :<C-u>CocListResume<CR>

    function! StatusDiagnostic() abort
      let info = get(b:, 'coc_diagnostic_info', {})
      if empty(info) | return '' | endif
      let msgs = []
      if get(info, 'error', 0)
        call add(msgs, 'E' . info['error'])
      endif
      if get(info, 'warning', 0)
        call add(msgs, 'W' . info['warning'])
      endif
      return join(msgs, ' '). ' ' . get(g:, 'coc_status', '')
    endfunction

    set statusline=\ %t%m%r%h%w%{StatusDiagnostic()}\ %=%(%{&ff}\|%{(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\")}%k\|%Y%)
    " coc-git
    set statusline^=%{get(g:,'coc_git_status','')}%{get(b:,'coc_git_status','')}%{get(b:,'coc_git_blame','')}
    "set statusline=\ %t%m%r%h%w%{StatusDiagnostic()}\ %=%(%{&ff}\|%{(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\")}%k\|%Y%)\ %([%l,%v][%p%%]\ %)

	" Create markmap from the whole file
	nmap <Leader>vm <Plug>(coc-markmap-create)
	" Create markmap from the selected lines
	vmap <Leader>vm <Plug>(coc-markmap-create-v)

  " coc-snippet {{{3
  " Use <C-l> for trigger snippet expand.
  imap <C-l> <Plug>(coc-snippets-expand)

  " Use <C-j> for select text for visual placeholder of snippet.
  vmap <C-j> <Plug>(coc-snippets-select)

  " Use <C-j> for jump to next placeholder, it's default of coc.nvim
  let g:coc_snippet_next = '<c-j>'

  " Use <C-k> for jump to previous placeholder, it's default of coc.nvim
  let g:coc_snippet_prev = '<c-k>'

  " Use <C-j> for both expand and jump (make expand higher priority.)
  imap <C-j> <Plug>(coc-snippets-expand-jump)


"}}}
"}}}
" 导航{{{2

let g:netrw_list_hide='\(^\|\s\s\)\zs\.\S\+'
let g:netrw_winsize=30
"let g:netrw_liststyle=3 "tree

" 0 keep the current directory the same as the browsing directory.
"let g:netrw_keepdir=0
let g:netrw_bookmarklist = [$PWD]
"let g:netrw_bookmarklist = ['/Users/Real/Documents/vim-workspace/docs']


Plug 'vim-voom/VOoM'
    let g:voom_tree_placement = 'right'
    let g:voom_ft_modes = {'markdown': 'pandoc', 'vim': 'fmr'}
    let g:voom_always_allow_move_left = 1
    nnoremap <silent> <leader>vv :VoomToggle<CR>
Plug 'majutsushi/tagbar'
	 nnoremap <leader>vt :TagbarToggle<cr>

"https://github.com/easymotion/vim-easymotion
"Plug 'easymotion/vim-easymotion'
	"map <leader><leader> <Plug>(easymotion-prefix)
"}}}
" 补全{{{2
"Plug 'wellle/tmux-complete.vim'
"    let g:tmuxcomplete#trigger = 'omnifunc'
Plug 'honza/vim-snippets'
"Plug 'tpope/vim-surround'
"Plug 'neovim/nvim-lspconfig'
"}}}
" 注释{{{2
Plug 'scrooloose/nerdcommenter'
"}}}
" 对齐{{{2
Plug 'junegunn/vim-easy-align'
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)
    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
"}}}
" Markdown{{{2
"Plug 'dhruvasagar/vim-table-mode'
"	" <leader>tm  enable/disable table mode
"	" <leader>tr realign table"
"	let g:table_mode_corner_corner='|'
"	"let g:table_mode_header_fillchar='='
Plug 'lvht/tagbar-markdown'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }

"Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
	" Fix: Folding and Unfolding when typing in insert mode
	" https://github.com/plasticboy/vim-markdown/issues/414
	let g:vim_markdown_folding_style_pythonic = 1
	let g:vim_markdown_folding_level = 0

	let g:vim_markdown_follow_anchor = 1

    "let g:vim_markdown_toc_autofit = 1
    "let g:vim_markdown_override_foldtext = 0
    "let g:html_wrong_comments=1
    "let g:vim_markdown_new_list_item_indent = 0
	" Highlight YAML front matter as used by Jekyll or Hugo.
	"let g:vim_markdown_frontmatter = 1

	set conceallevel=2
"}}}
" Syntax {{{2
" Plug 'ekalinin/Dockerfile.vim'
Plug 'chr4/nginx.vim'
Plug 'Glench/Vim-Jinja2-Syntax'
Plug 'neoclide/jsonc.vim'
" }}}
" Color Theme{{{2
Plug 'NLKNguyen/papercolor-theme'

let g:solarized_termcolors = 256
let g:solarized_termtrans  = 1
let g:solarized_underline  = 0
Plug 'altercation/vim-colors-solarized'

Plug 'challenger-deep-theme/vim'
"}}}
" FZF{{{2
"https://github.com/junegunn/fzf.vim
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

	nnoremap <silent> <leader>lm  :Marks<cr>
	nnoremap <silent> <leader>f   :Files<cr>
	nnoremap <silent> <leader>lb  :Buffers<cr>
	nnoremap <silent> <leader>lw  :Windows<cr>
	nnoremap <silent> <leader>lc  :Commands<cr>

    command! -bang -nargs=? -complete=dir Files
        \ call fzf#vim#files(<q-args>, {'options': [
		\ '--preview', 'cat {}',
		\ '--preview-window', 'right:50%:hidden',
		\ '--bind=X:execute(open {})+abort,ctrl-_:toggle-preview',
		\ '--info=inline']}, <bang>0)
"}}}
" [smartim](https://github.com/ybian/smartim)
" use [macism](https://github.com/laishulu/macism/) as Input Source Manager
Plug 'ybian/smartim'

" git
Plug 'tpope/vim-fugitive'

" https://github.com/psliwka/vim-smoothie 平滑滚动
Plug 'psliwka/vim-smoothie'

lua vim.fn["plug#end"]()

filetype plugin indent on
syntax enable

" Highlight {{{2
"hi default CocHighlightText  guibg=darkyellow guifg=red ctermbg=223 ctermfg=red

" Coc
" color cursor position object
hi link CocHighlightText Visual
" coclist selected color
hi link CursorLine Visual

" EasyMotion
hi link EasyMotionTarget Visual
hi link EasyMotionShade  Comment
hi link EasyMotionTarget2First Visual
hi link EasyMotionTarget2Second Visual
"hi link EasyMotionTarget2First MatchParen
"hi link EasyMotionTarget2Second MatchParen
hi link EasyMotionMoveHL Visual
hi link EasyMotionIncSearch Visual

hi link IncSearch Search
"}}}
" }}}
"nvim-lsp {{{1
"lua << EOF
"require'nvim_lsp'.pyls.setup{}
"EOF
"
"set completeopt-=preview
"
"" use omni completion provided by lsp
"autocmd Filetype python setlocal omnifunc=v:lua.vim.lsp.omnifunc
"}}}
" Command {{{1
command! Dos2unix e ++ff=unix | %s/\r//g
command! Ssconfig tabe ~/.ShadowsocksX/user-rule.txt
au BufWritePost ~/.ShadowsocksX/user-rule.txt
            \ !genpac --format=pac
            \ --pac-proxy="SOCKS5 127.0.0.1:1080; SOCKS 127.0.0.1:1080; DIRECT;"
            \ --user-rule-from=~/.ShadowsocksX/user-rule.txt
            \ --gfwlist-proxy="SOCKS5 127.0.0.1:1080;"
            \ > ~/.ShadowsocksX/gfwlist.js
command! Sshconfig tabe ~/Documents/Note/scripts/ssh.config.json

au BufWritePost ~/Documents/Note/scripts/ssh.config.json
            \ !cd ~/Documents/Note/scripts/
            \ && ./template.rander.lua ssh.config.lrt ssh.config.json
            \ > ~/.ssh/config
            \ && ./template.rander.lua ssh.config.hosts.lrt ssh.config.json
            \ > ~/.ssh/config_hosts

command! DeleteSpace %s/\([^#-_ a-zA-z]\)  *\([^#-_ a-zA-z]\)/\1\2/g

"command! VimrcEdit tabe ~/.config/nvim/init.vim
command! VimrcReload so ~/.config/nvim/init.vim
" }}}
" Autocmd {{{1
"autocmd FileType c,cpp setlocal ts=4 sw=4 fdm=syntax
autocmd FileType go setlocal ts=4 sw=4 fdm=syntax
autocmd FileType python,yaml,lua,sh,vim setlocal ts=4 sw=4 fdm=indent

autocmd FileType markdown setlocal ts=4 sw=4 et
autocmd FileType markdown let g:tagbar_sort = 0
" fix list 中 ”<" 高亮错误
"autocmd FileType markdown syn cluster htmlTop contains=@Spell,htmlEndTag,htmlSpecialChar,htmlPreProc,htmlComment,htmlLink,javaScript,@htmlPreproc
" 嵌套 fold
"autocmd FileType markdown set foldexpr=NestedMarkdownFolds()

"autocmd FileType markdown setlocal tw=100
autocmd FileType java,c,cpp setlocal fdm=syntax ts=4 sw=4 et
autocmd FileType nginx setlocal ts=4 sw=4
autocmd FileType snippets setlocal ts=4 sw=4
autocmd FileType jsp,xml,html,css setlocal ts=2 sw=2
autocmd FileType javascript,typescript.tsx,json setlocal ts=2 sw=2
autocmd BufNewFile,BufRead *.json setlocal filetype=jsonc ts=2 sw=2
autocmd BufNewFile,BufRead *.tsx set filetype=typescript.tsx
autocmd BufNewFile,BufRead *.jsx set filetype=javascript.jsx
autocmd BufNewFile,BufRead *.docker set filetype=Dockerfile
" default filetype
autocmd BufEnter * if &filetype == "" | setlocal ft=text | endif

" }}}
" Map {{{1
"nnoremap q; q:
noremap! <c-a> <Home>
noremap! <c-e> <End>
inoremap <c-f> <Right>
noremap! <c-b> <Left>
noremap! <c-n> <Down>
noremap! <c-p> <Up>

inoremap <c-k> <c-o>D

" nnoremap 0 :call ToggleHomeZero()<CR>

"inoremap <c-k> <c-o>D

nnoremap j gj
nnoremap k gk

" previous buffer
"nnoremap gp :bp<cr>
" next buffer
"nnoremap gn :bn<cr>
" last buffer
"nnoremap go <c-^>
" previous tab, the key of next tab is default: gt
"nnoremap gb gT

" change to current directory
"nnoremap <leader>cd :lcd %:h<CR>

" terminal
"tnoremap <esc> <c-w>N
"nnoremap <silent> <leader>vs :terminal<CR>

" buffer
nnoremap <leader>w :w<cr>
"nnoremap <silent> <leader>bb  :<C-u>CocList --ignore-case -N buffers<cr>
"nnoremap <silent> <leader>lf  :<C-u>CocList --ignore-case files<cr>
nnoremap <leader>bd :bd<cr>
nnoremap <leader>bn :bnext<cr>
nnoremap <leader>bp :bprevious<cr>

" save
"inoremap jj <esc>

"https://github.com/weirongxu/coc-explorer
"nnoremap <leader>ve :CocCommand explorer<CR>
nnoremap <leader>ve :Explore<CR>
"nnoremap <leader>vr :Rexplore<CR>

nmap <a-=> :split term://$SHELL <CR>
"nmap <a-=> <Plug>(coc-terminal-toggle)
"tmap <a-=> <c-\><c-n><Plug>(coc-terminal-toggle)
"tmap <a-=> <c-\><c-n>:TermvimBottomToggle<cr>
"tmap <c-j> <c-\><c-n><c-j>
"tmap <c-h> <c-\><c-n><c-h>
"tmap <c-l> <c-\><c-n><c-l>
"tmap <c-k> <c-\><c-n><c-k>
tmap <c-o> <c-\><c-n>

" }}}
" Options && Variables {{{1
lua << EOF
-- vim.wo.foldcolumn = "1"
-- vim.wo.number = true
-- vim.wo.relativenumber = true
vim.o.cursorline = true
vim.o.clipboard = "unnamed"
vim.o.foldlevel = 99
vim.o.fileencodings="utf-8,gbk,ucs-bom,cp936,gb18030,big5,latin1"
vim.o.modeline = true
vim.o.modelines=3
vim.o.smartcase = true
vim.o.ignorecase = true
vim.o.mouse="a"
EOF

"set macmeta
" make 前自动保存
"set autowrite

" 命令窗口
"set cmdwinheight=20
set cmdheight=2

"set synmaxcol=200
let loaded_matchparen = 1

set hidden

set splitbelow
set previewheight=8
set colorcolumn=+1
set bg=light
"set tgc

colorscheme PaperColor
"colorscheme challenger_deep
"colorscheme molokai
"colorscheme solarized
"colorscheme onehalflight
"colorscheme onehalfdark


"if has("gui_vimr")
"	" Here goes some VimR specific settings like
"	colorscheme challenger_deep
"else
"	colorscheme PaperColor
"endif

"}}}
" Cabbreviate {{{1
"cabbrev h tab h
"}}}
" Functions {{{1

"function CocListOpenWith(coc_list_context, cmd)
  "let list_name = a:coc_list_context["name"]
  "let label_name = a:coc_list_context["targets"][0]["label"]
  "call substitute(label_name, " ", "\\ ", "g")
  "if list_name == "files"
	  "call system(a:cmd . " " . label_name)
  "endif
"endfunction

"function! OpenWithSystemApp(coc_list_context)
	"" call luaeval('coc_list_open_file_with(unpack(_A))', [a:coc_list_context, "open"])
  "call CocListOpenWith(a:coc_list_context, "open")
"endfunction

"function! OpenWithFinder(coc_list_context)
	"" call luaeval('coc_list_open_file_with(unpack(_A))', [a:coc_list_context, "open -R"])
  "call CocListOpenWith(a:coc_list_context, "open -R")
"endfunction

"function ExploreDir(path)
  "execute "lcd " . a:path
  "execute "Explore " . a:path
"endfunction

"command! Docs call ExploreDir("~/Documents/vim-workspace/docs")
"command! DotFiles call ExploreDir("~/code/whyreal/dotfiles/")

"function ToggleHomeZero()
"    let char_postion = match(getline("."), "\S") + 1
"    let curcol = col(".")
"    if curcol == char_postion
"      call cursor(0, 1)
"    else
"      call cursor(0, char_postion)
"    endif
"endfunction
"}}}
" Lua {{{1
" if has('nvim')
"     lua package.path = package.path .. ";" ..  "/usr/local/share/lua/5.3/?.lua;/usr/local/share/lua/5.3/?/init.lua;/usr/local/lib/lua/5.3/?.lua;/usr/local/lib/lua/5.3/?/init.lua;./?.lua;./?/init.lua"
"     lua require("utils")
" else
" 	set ttymouse=xterm2
" 	if has('lua')
" 	  lua package.path = package.path .. ";" .. os.getenv("HOME") .. "/.vim/lua/?.lua"
" 	  lua require("utils")
" 	endif
" endif

" nnoremap 0 :lua toggle_home_zero()<CR>

" command! -range TemplateRender call luaeval('template_render(unpack(_A))', [<line1>, <line2>])
" command! -range TemplateSet call luaeval('template_set(unpack(_A))', [<line1>, <line2>])

"noremap o :lua add_blank_line_after()<cr>
"noremap O :lua add_blank_line_before()<cr>

"command! -nargs=1 Edit lua edit_remote_file(<f-args>)
"command! ServerUpdateInfo lua update_server_info()
"}}}

" vim: fdm=marker
