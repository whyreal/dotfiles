lua dofile(os.getenv("HOME") .. "/.vim/lua/utils.lua")
" Package Manager {{{1
call plug#begin('~/.vim/plugged')

" basic plugins{{{2
let mapleader=","
Plug 'tpope/vim-sensible'
"}}}
" COC{{{2
Plug 'neoclide/coc.nvim' , {'branch': 'release'}
    " if hidden is not set, TextEdit might fail.
    set hidden

    " Better display for messages
    "set cmdheight=2

    " Smaller updatetime for CursorHold & CursorHoldI
    set updatetime=300

    " don't give |ins-completion-menu| messages.
    set shortmess+=c

    " always show signcolumns
    "set signcolumn=yes

    " Use tab for trigger completion with characters ahead and navigate.
    " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction

    " Use <c-space> for trigger completion.
    inoremap <silent><expr> <c-space> coc#refresh()

    " Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
    " Coc only does snippet and additional edit on confirm.
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

    " Use `[c` and `]c` for navigate diagnostics
    nmap <silent> [c <Plug>(coc-diagnostic-prev)
    nmap <silent> ]c <Plug>(coc-diagnostic-next)

    " Remap keys for gotos
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)

    " Use K for show documentation in preview window
    nnoremap <silent> K :call <SID>show_documentation()<CR>

    function! s:show_documentation()
      if &filetype == 'vim'
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction

    " Highlight symbol under cursor on CursorHold
    autocmd CursorHold * silent call CocActionAsync('highlight')
    

    " Remap for rename current word
    nmap <leader>rn <Plug>(coc-rename)

    " Remap for format selected region
    vmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)

    augroup mygroup
      autocmd!
      " Setup formatexpr specified filetype(s).
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end

    " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
    vmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)

    " Remap for do codeAction of current line
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Fix autofix problem of current line
    nmap <leader>qf  <Plug>(coc-fix-current)

    " Use `:Format` for format current buffer
    command! -nargs=0 Format :call CocAction('format')

    " Use `:Fold` for fold current buffer
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)

    " Using CocList
    " Show all diagnostics
    nnoremap <silent> <leader>la  :<C-u>CocList diagnostics<cr>
    " Manage extensions
    nnoremap <silent> <leader>le  :<C-u>CocList extensions<cr>
    " Show commands
    nnoremap <silent> <leader>lc  :<C-u>CocList commands<cr>
    " Find symbol of current document
    nnoremap <silent> <leader>lo  :<C-u>CocList outline<cr>
    " Search workspace symbols
    nnoremap <silent> <leader>ls  :<C-u>CocList -R --ignore-case -N -I symbols<cr>
    nnoremap <silent> <leader>lb  :<C-u>CocList -R --ignore-case -N buffers<cr>
    nnoremap <silent> <leader>lf  :<C-u>CocList -R --ignore-case files<cr>
    nnoremap <silent> <leader>lr  :<C-u>CocList -R --ignore-case -N mru<cr>
    nnoremap <silent> <leader>lm  :<C-u>CocList -R --ignore-case -N marks<cr>
    " Search
    nnoremap <leader>s  <Plug>(coc-workspaceSymbols)
    " Do default action for next item.
    nnoremap <silent> <leader>j  :<C-u>CocNext<CR>
    " Do default action for previous item.
    nnoremap <silent> <leader>k  :<C-u>CocPrev<CR>
    " Resume latest coc list
    nnoremap <silent> <leader>p  :<C-u>CocListResume<CR>

    function! StatusDiagnostic() abort
      let info = get(b:, 'coc_diagnostic_info', {})
      if empty(info) | return '' | endif
      let msgs = []
      if get(info, 'error', 0)
        call add(msgs, 'E' . info['error'])
      endif
      if get(info, 'warning', 0)
        call add(msgs, 'W' . info['warning'])
      endif
      return join(msgs, ' '). ' ' . get(g:, 'coc_status', '')
    endfunction

    set statusline=\ %t%m%r%h%w%{StatusDiagnostic()}\ %=%(%{&ff}\|%{(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\")}%k\|%Y%)
    " coc-git
    set statusline^=%{get(g:,'coc_git_status','')}%{get(b:,'coc_git_status','')}%{get(b:,'coc_git_blame','')}
    "set statusline=\ %t%m%r%h%w%{StatusDiagnostic()}\ %=%(%{&ff}\|%{(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\")}%k\|%Y%)\ %([%l,%v][%p%%]\ %)

    hi default CocHighlightText  guibg=darkyellow guifg=red ctermbg=223 ctermfg=red

    function OpenWithSystemApp(coc_list_context)
        lua coc_list_open_file_with(vim.eval("a:coc_list_context"), "open")
    endfunction

    function OpenWithFinder(coc_list_context)
        lua coc_list_open_file_with(vim.eval("a:coc_list_context"), "open -R")
    endfunction
"}}}
" 导航{{{2
let g:netrw_list_hide='\(^\|\s\s\)\zs\.\S\+'
let g:netrw_winsize=30
"let g:netrw_liststyle=3 "tree

Plug 'christoomey/vim-tmux-navigator'
Plug 'vim-voom/VOoM'
    let g:voom_tree_placement = 'right'
    let g:voom_ft_modes = {'markdown': 'pandoc'}
    let g:voom_always_allow_move_left = 1
    au FileType * lua detect_voom_type()
    nnoremap <silent> <leader>vv :VoomToggle<CR>

Plug 'majutsushi/tagbar'
    nnoremap <leader>vt :TagbarToggle<cr>
Plug 'lvht/tagbar-markdown'

"}}}
" 补全{{{2
Plug 'wellle/tmux-complete.vim'
    let g:tmuxcomplete#trigger = 'omnifunc'
Plug 'honza/vim-snippets'
Plug 'tpope/vim-surround'
"}}}
" 注释{{{2
Plug 'scrooloose/nerdcommenter'
"}}}
" 对齐{{{2
Plug 'junegunn/vim-easy-align'
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)
    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
"}}}
" Markdown{{{2
Plug 'plasticboy/vim-markdown'
    let g:vim_markdown_toc_autofit = 1
    "let g:vim_markdown_folding_style_pythonic = 1
    "let g:vim_markdown_override_foldtext = 0
    let g:html_wrong_comments=1
    "let g:vim_markdown_new_list_item_indent = 0

Plug 'previm/previm'
    let g:previm_open_cmd="open"
	let g:previm_show_header = 0

"}}}
" UML{{{2
"Plug 'scrooloose/vim-slumlord'
"Plug 'aklt/plantuml-syntax'
"    let g:plantuml_executable_script='~/.vim/plantuml/plantuml.sh'
"}}}
" Misc {{{2
Plug 'chr4/nginx.vim'
Plug 'easymotion/vim-easymotion'
    let g:EasyMotion_keys = 'ertyuidfghjkcvbnm,'
    let g:EasyMotion_smartcase = 1
    map f <Plug>(easymotion-prefix)

" }}}
" Color Theme{{{2
Plug 'NLKNguyen/papercolor-theme'
"}}}

call plug#end()

filetype plugin indent on
syntax enable
" }}}
" Command {{{1
command! -nargs=1 Edit lua edit_remote_file(<f-args>)
command! -range TemplateRender <line1>,<line2>lua template_render()
command! -range TemplateSet <line1>,<line2>lua template_set()
command! Docs lua cd_workspace("~/Documents/vim-workspace/docs")
command! Dos2unix e ++ff=unix | %s///g
command! DotFiles lua cd_workspace("~/code/whyreal/dotfiles/")
command! ExcuteUnnamedRegister lua vim.command(vim.eval("@\""))
command! Favorites lua cd_workspace("~/Documents/vim-workspace/常用文档")
command! Md2doc !md2doc %
command! Md2pdf !md2pdf %
command! ServerUpdateInfo lua update_server_info()
command! Ssconfig tabe ~/.ShadowsocksX/user-rule.txt
command! Sshconfig tabe ~/Documents/Note/scripts/ssh.config.json
command! VimrcEdit tabe ~/.vim/vimrc
command! VimrcReload so ~/.vim/vimrc
command! Worklog edit ~/Documents/Note/work.shortcut.md
" }}}
" Autocmd {{{1
"autocmd FileType c,cpp setlocal ai ts=4 sw=4 fdm=syntax
autocmd FileType go setlocal ai ts=4 sw=4 fdm=indent
autocmd FileType java setlocal et ai ts=4 sw=4 tw=120 fdm=indent
autocmd FileType lua setlocal ai ts=4 sw=4 et fdm=indent tw=80
autocmd FileType python setlocal fdm=indent ai ts=4 sw=4 et
autocmd FileType markdown setlocal ts=4 sw=4 fdm=indent et
autocmd FileType nginx setlocal ai ts=4 sw=4
autocmd FileType sh setlocal ai ts=4 sw=4 et fdm=indent
autocmd FileType snippets setlocal ts=4 sw=4
autocmd FileType vim setlocal ts=4 sw=4 et fdm=marker
autocmd FileType jsp,xml,html,css setlocal fdm=indent ai ts=2 sw=2
autocmd FileType yaml setlocal fdm=indent ai ts=2 sw=2 et
autocmd BufNewFile,BufRead *.tsx set filetype=typescript.tsx
autocmd BufNewFile,BufRead *.jsx set filetype=javascript.jsx
autocmd FileType json setlocal ai ts=2 sw=2 fdm=indent
autocmd FileType javascript,typescript.tsx setlocal ai ts=2 sw=2 fdm=indent
" default filetype
autocmd BufEnter * if &filetype == "" | setlocal ft=text | endif

au BufWritePost ~/.ShadowsocksX/user-rule.txt
            \ !genpac --format=pac
            \ --pac-proxy="SOCKS5 127.0.0.1:1080; SOCKS 127.0.0.1:1080; DIRECT;"
            \ --user-rule-from=~/.ShadowsocksX/user-rule.txt
            \ > ~/.ShadowsocksX/gfwlist.js
au BufWritePost ~/Documents/Note/scripts/ssh.config.json
            \ !cd ~/Documents/Note/scripts/
            \ && ./template.rander.lua ssh.config.lrt ssh.config.json
            \ > ~/.ssh/config
" }}}
" Map {{{1
nnoremap q; q:
vnoremap < <gv
vnoremap > >gv
inoremap <c-o> <ESC>
noremap! <c-a> <Home>
noremap! <c-e> <End>
noremap! <c-f> <Right>
noremap! <c-b> <Left>
noremap! <c-n> <Down>
noremap! <c-p> <Up>
inoremap <c-k> <c-o>D

" previous buffer
nnoremap gp :bp<cr>
" next buffer
nnoremap gn :bn<cr>
" last buffer
nnoremap go <c-^>
" previous tab, the key of next tab is default: gt
nnoremap gb gT

" change to current directory
nnoremap <silent> <leader>cd :lcd %:h<CR>

nnoremap 0 :lua toggle_home_zero()<CR>

" terminal 
tnoremap <esc> <c-w>N

" save
nnoremap <leader>w :w<cr>

nnoremap <silent> <leader>vs :terminal<CR>
nnoremap <silent> <leader>vm :marks<CR>
nnoremap <leader>ve :Explore<CR>
nnoremap <leader>vr :Rexplore<CR>

" }}}
" Options && Variables {{{1
"set number relativenumber
set foldlevel=99
set clipboard+=unnamed
set fileencodings=utf-8,gbk,ucs-bom,cp936,gb18030,big5,latin1
set modeline modelines=3
set smartcase ignorecase
set hlsearch
set mouse=""
"set ttymouse=xterm2
set iskeyword=-,@,48-57,_,192-255
"set macmeta
" make 前自动保存
set autowrite

" 命令窗口
set cmdwinheight=20

"set synmaxcol=200
let loaded_matchparen = 1
set belloff=all

set directory=/tmp
set hidden

set splitbelow
set previewheight=8
set colorcolumn=+1
set bg=dark

if has('gui_running')
    " 透明
    "set transparency=30
    " 模糊
    "set blurradius=20
    set linespace=1
    set cursorline
    set guioptions='egk'
    set guifont=Menlo-Bold:h12
else
    "set term=builtin_ansi
endif

colorscheme PaperColor
"}}}
" Cabbreviate {{{1
cabbrev h tab h
"}}}
