" Package Manager {{{1
call plug#begin('~/.vim/plugged')

" basic plugins{{{2
let mapleader=" "
Plug 'tpope/vim-sensible'
Plug 'whyreal/wr_vim'
Plug 'whyreal/vim-template'
"}}}
" 输入法切换{{{2
Plug 'rlue/vim-barbaric'
let g:barbaric_default = 4
let g:barbaric_scope = 'buffer'
"}}}
" fuzzy finder{{{2
Plug 'Shougo/denite.nvim'
"}}}
" 导航{{{2
Plug 'christoomey/vim-tmux-navigator'
Plug 'scrooloose/nerdtree'
    nnoremap <leader>ve :NERDTreeToggle<CR>
    let NERDTreeShowBookmarks = 0
    let NERDTreeBookmarksSort = 0

Plug 'vim-voom/VOoM'
    let g:voom_tree_placement = 'right'
    let g:voom_ft_modes = {'markdown': 'pandoc'}
    let g:voom_always_allow_move_left = 1
    au BufRead * call wr#DetectVoomType()
    nnoremap <silent> <leader>vv :VoomToggle<CR>

Plug 'majutsushi/tagbar'
    nnoremap <leader>vt :TagbarToggle<cr>
"}}}
" 自动补全{{{2

" https://github.com/neoclide/coc.nvim
Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> coc#util#install()}}
    " Use <c-space> for trigger completion.
    inoremap <silent><expr> <c-space> coc#refresh()
    nnoremap <silent> <leader>da  :<C-u>Denite coc-diagnostic<cr>
    nnoremap <silent> <leader>dc  :<C-u>Denite coc-command<cr>
    nnoremap <silent> <leader>de  :<C-u>Denite coc-extension<cr>
    nnoremap <silent> <leader>dl  :<C-u>Denite coc-link<cr>
    nnoremap <silent> <leader>do  :<C-u>Denite coc-symbols<cr>
    nnoremap <silent> <leader>ds  :<C-u>Denite coc-service<cr>
    nnoremap <silent> <leader>dt  :<C-u>Denite coc-workspace<cr>

    nnoremap <silent> gd <Plug>(coc-definition)
    nnoremap <silent> gy <Plug>(coc-type-definition)
    nnoremap <silent> gi <Plug>(coc-implementation)
    nnoremap <silent> gr <Plug>(coc-references)

    " Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
    " Coc only does snippet and additional edit on confirm.
    inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

Plug 'SirVer/ultisnips'
    let g:UltiSnipsExpandTrigger="<c-j>"
    let g:UltiSnipsSnippetsDir="~/.vim/plugged/wr_vim/UltiSnips/"
    let g:UltiSnipsEnableSnipMate=1
    let g:UltiSnipsSnippetDirectories=["UltiSnips"]

Plug 'honza/vim-snippets'
Plug 'tpope/vim-surround'
Plug 'jiangmiao/auto-pairs'
    let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"'}
"}}}
" 注释{{{2
Plug 'scrooloose/nerdcommenter'
"}}}
" 对齐{{{2
Plug 'junegunn/vim-easy-align'
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
"}}}

" 前端 {{{2
Plug 'leafgarland/typescript-vim'
" }}}

" Markdown{{{2
Plug 'plasticboy/vim-markdown'
    let g:vim_markdown_toc_autofit = 1
    "let g:vim_markdown_folding_style_pythonic = 1
    let g:html_wrong_comments=1
    "let g:vim_markdown_new_list_item_indent = 0

Plug 'kannokanno/previm'
    let g:previm_custom_css_path='~/.vim/plugged/wr_vim/previm.css'
    let g:previm_open_cmd='open'
"}}}
" Color Theme{{{2
"Plug 'lmintmate/blue-mood-vim'
"Plug 'NLKNguyen/papercolor-theme'
"Plug 'dracula/vim'
Plug 'sonph/onehalf', {'rtp': 'vim'}
"Plug 'hukl/Smyck-Color-Scheme'
"Plug 'tomasr/molokai'
"}}}

call plug#end()

filetype plugin indent on
syntax enable
"}}}

" Operation {{{1
set foldlevel=99
set clipboard+=unnamed
set autoread
set fileencodings=utf-8,gbk,ucs-bom,cp936,gb18030,big5,latin1
set modeline
set modelines=3
set smartcase
set ignorecase
set hlsearch
set incsearch
set wildmode=full
set mouse=a
"set tags=./.tags;,.tags
set iskeyword=-,@,48-57,_,192-255
"set macmeta
" make 前自动保存
set autowrite

vnoremap < <gv
vnoremap > >gv
nnoremap n nzz
nnoremap N Nzz
nnoremap <2-LeftMouse> za

"inoremap jj <ESC>

noremap! <c-a> <Home>
noremap! <c-e> <End>
noremap! <c-f> <Right>
noremap! <c-b> <Left>
noremap! <c-j> <Down>
noremap! <c-k> <Up>
noremap! <c-d> <Del>

" previous buffer
nnoremap gp :bp<cr>
" next buffer
nnoremap gn :bn<cr>
" last buffer
nnoremap go <c-^>
" previous tab, the key of next tab is default: gt
nnoremap gb gT


" change to current directory
nnoremap <silent> <leader>cd :lcd %:h<CR>

nnoremap 0 :call wr#ToggleHomeZero()<CR>
"}}}
" Ui{{{1
set statusline=\ %F%m%r%h%w\ %=%(%{&ff}\|%{(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\")}%k\|%Y%)\ %([%l,%v][%p%%]\ %)
"set synmaxcol=200
let loaded_matchparen = 1
set belloff=all

set directory=/tmp
set hidden

" Better display for messages
set cmdheight=2
" Smaller updatetime for CursorHold & CursorHoldI
set updatetime=300
" don't give |ins-completion-menu| messages.
set shortmess+=c
" always show signcolumns
set signcolumn=yes

set splitbelow
set previewheight=8
colorscheme desert

"set nu

if has('gui_running')
    " 透明
    set transparency=10
    " 模糊
    "set blurradius=10
    set linespace=1
    set guioptions='egk'
    set guifont=menlo:h12
    colorscheme onehalfdark
else
    "set term=builtin_ansi
endif
" not display ~ for blank line
"highlight EndOfBuffer ctermfg=black guifg=bg
"}}}
" FileType {{{1
"autocmd FileType c,cpp setlocal ai ts=4 sw=4 fdm=syntax
"autocmd FileType go setlocal ai ts=4 sw=4
autocmd FileType java setlocal et ai ts=4 sw=4 tw=120
"autocmd FileType lua setlocal ai ts=4 sw=4 et
"autocmd FileType python setlocal fdm=indent ai ts=4 sw=4 et
autocmd FileType markdown setlocal ts=4 sw=4 et
autocmd FileType nginx setlocal ai ts=4 sw=4
autocmd FileType sh setlocal ai ts=4 sw=4 et
autocmd FileType snippets setlocal ts=4 sw=4
autocmd FileType vim setlocal ts=4 sw=4 et fdm=marker
autocmd FileType xml,html,css setlocal fdm=indent ai ts=2 sw=2
autocmd FileType yaml setlocal fdm=indent ai ts=2 sw=2 et
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.tsx
autocmd FileType javascript,json,typescript setlocal ai ts=2 sw=2 fdm=indent

" default filetype
autocmd BufEnter * if &filetype == "" | setlocal ft=text | endif
" }}}
